{"version":3,"file":"index.js","sources":["../node_modules/@masx200/mvvm-reactive-view/src/reflect.ts","../node_modules/@masx200/mvvm-reactive-view/src/util.ts","../node_modules/@masx200/mvvm-reactive-view/src/customelement.ts","../node_modules/@masx200/mvvm-reactive-view/src/CustomElementRegistry.ts"],"sourcesContent":["const Reflect = window.Reflect;\r\n// export default Reflect;\r\n\r\nexport const {\r\n  apply,\r\n  construct,\r\n  defineProperty,\r\n  deleteProperty,\r\n  get,\r\n  getOwnPropertyDescriptor,\r\n  getPrototypeOf,\r\n  has,\r\n\r\n  //   isExtensible,\r\n  ownKeys,\r\n  //   preventExtensions,\r\n  set\r\n  //   setPrototypeOf\r\n} = Reflect;\r\n// export {};\r\n/*\r\napply()\r\n对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似。\r\nconstruct()\r\n对构造函数进行 new 操作，相当于执行 new target(...args)。\r\ndefineProperty()\r\n和 Object.defineProperty() 类似。\r\ndeleteProperty()\r\n作为函数的delete操作符，相当于执行 delete target[name]。\r\n//Reflect.enumerate()\r\n该方法会返回一个包含有目标对象身上所有可枚举的自身字符串属性以及继承字符串属性的迭代器，for...in 操作遍历到的正是这些属性。\r\nget()\r\n获取对象身上某个属性的值，类似于 target[name]。\r\ngetOwnPropertyDescriptor()\r\n类似于 Object.getOwnPropertyDescriptor()。\r\ngetPrototypeOf()\r\n类似于 Object.getPrototypeOf()。\r\nhas()\r\n判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同。\r\nisExtensible()\r\n类似于 Object.isExtensible().\r\nownKeys()\r\n返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).\r\npreventExtensions()\r\n类似于 Object.preventExtensions()。返回一个Boolean。\r\nset()\r\n将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\r\nsetPrototypeOf()\r\n类似于 Object.setPrototypeOf()。\r\n*/\r\n","export { isplainobject };\r\nexport { isfunction as isFunction, isarray as isArray, isstring as isString };\r\nexport { isprimitive };\r\n\r\nconst isplainobject = (a: any) => isobject(a) && gettagtype(a) === \"object\";\r\n\r\nimport isprimitive from \"./isprimitive\";\r\nimport { /* has,  */ get } from \"./reflect\";\r\nimport { isFunction } from \"./util\";\r\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\nexport function isundefined(a: any): a is void {\r\n  return (!a && a === void 0) || a === null;\r\n}\r\n\r\nexport function isnumber(a: any): a is number {\r\n  return typeof a === \"number\";\r\n}\r\nexport function isboolean(a: any): a is boolean {\r\n  return typeof a === \"boolean\";\r\n}\r\nexport function isobject(a: any): a is object | Record<string, any> {\r\n  return typeof a === \"object\" && a !== null;\r\n}\r\n// export function isstring(a: string): true;\r\n// export function isstring(a): boolean;\r\nexport function isstring(a: any): a is string {\r\n  return typeof a === \"string\";\r\n}\r\nexport function isfunction(a: any): a is Function {\r\n  return typeof a === \"function\";\r\n}\r\n\r\nexport function isarray(a: any): a is Array<any> {\r\n  return a instanceof Array && Array.isArray(a) && gettagtype(a) === \"array\";\r\n}\r\n/* export function getsymbol(a: string) {\r\n  return Symbol(a);\r\n} */\r\nexport function gettagtype(a: any): string {\r\n  return {}.toString\r\n    .call(a)\r\n    .replace(\"[object \", \"\")\r\n    .replace(\"]\", \"\")\r\n    .toLowerCase()\r\n    .trim();\r\n}\r\nexport function ispromise(a: any): a is Promise<any> {\r\n  return gettagtype(a) === \"promise\" && isFunction(get(a, \"then\"));\r\n}\r\nexport function isSet(a: any): a is Set<any> {\r\n  return gettagtype(a) === \"set\" && a instanceof Set;\r\n}\r\n\r\nconst camelizeRE = /-(\\w)/g;\r\nexport const camelize = (str: string): string => {\r\n  return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \"\"));\r\n};\r\n\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\nexport const hyphenate = (str: string): string => {\r\n  return str.replace(hyphenateRE, \"-$1\").toLowerCase();\r\n};\r\n","import { Class } from \"./customclass\";\r\n//import setlikearray from \"./setlikearay\";\r\n// const customElementsarray = new Set;\r\nimport RandomDefineCustomElement, {\r\n  invalid_custom_element_class\r\n} from \"./CustomElementRegistry\";\r\nimport { construct } from \"./reflect\";\r\n/* function getcustomelementname(initclass: any): string {\r\n  return customElements(initclass);\r\n} */\r\nimport { isfunction } from \"./util\";\r\n\r\nexport function isclassextendsHTMLElement(initclass: {\r\n  prototype: any;\r\n}): initclass is Class {\r\n  return !!(\r\n    isfunction(initclass) &&\r\n    initclass.prototype &&\r\n    initclass.prototype instanceof HTMLElement\r\n  );\r\n}\r\n\r\n// import Reflect from \"./reflect\";\r\n\r\n// import { Class } from \"./rendervdomtoreal\";\r\n\r\nexport function createcostumelemet(\r\n  initclass: Class | Function,\r\n  propsjson?: object,\r\n  children?: any[]\r\n  //   options?: any\r\n): HTMLElement {\r\n  if (isclassextendsHTMLElement(initclass)) {\r\n    // customElementsarray.push(initclass);\r\n    /*   const elementname =\r\n     getcustomelementname(initclass); */\r\n    /* if (customElements.get(elementname) === initclass) {\r\n    } else {\r\n      customElements.define(elementname, initclass);\r\n    } */\r\n    RandomDefineCustomElement(initclass);\r\n    return construct(initclass, [propsjson, children /* , options */]); // (children);\r\n  } else {\r\n    console.error(initclass);\r\n    console.error(invalid_custom_element_class);\r\n    throw TypeError();\r\n  }\r\n}\r\n","export const invalid_custom_element_class = \"invalid custom element class !\";\r\nimport { isclassextendsHTMLElement } from \"./customelement\";\r\nimport { get, getPrototypeOf, has, set } from \"./reflect\";\r\nimport { isobject } from \"./util\";\r\nif (\r\n  //   typeof Proxy !== \"function\" ||\r\n  !isobject(window.customElements) //||\r\n  //   typeof customElements !== \"object\" ||\r\n\r\n  //||\r\n  //   typeof CustomElementRegistry !== \"function\"\r\n) {\r\n  console.error(\" customElements  not supported !\");\r\n  throw new TypeError();\r\n}\r\n\r\nfunction 使用value从表中查询key(\r\n  表: object,\r\n  组件状态名: any\r\n): string | undefined {\r\n  const outputentrie = Object.entries(表).find(v => {\r\n    return v[1] === 组件状态名;\r\n  });\r\n  return outputentrie ? outputentrie[0] : undefined;\r\n}\r\n\r\ninterface ElementDefinitionOptions {\r\n  extends?: string;\r\n}\r\nwindow.CustomElementRegistry = get(\r\n  getPrototypeOf(window.customElements),\r\n  \"constructor\"\r\n);\r\nconst elementset = Symbol.for(\"elementset\");\r\nconst elementmap = Symbol.for(\"elementmap\");\r\n\r\ninterface CustomElements extends CustomElementRegistry {\r\n  [elementset]: Set<Function>;\r\n  [elementmap]: Record<string, Function>;\r\n}\r\nconst { CustomElementRegistry } = window;\r\nconst customElements = window.customElements as CustomElements;\r\n// export default customElements;\r\n\r\nif (!has(customElements, elementset)) {\r\n  set(customElements, elementset, new Set());\r\n  //   customElements[elementset] = new Set();\r\n}\r\nif (!has(customElements, elementmap)) {\r\n  set(customElements, elementmap, {});\r\n  //   customElements[elementmap] = {};\r\n}\r\nexport default (initclass: Function, extendsname?: string) =>\r\n  RandomDefineCustomElement(initclass, extendsname);\r\n\r\nfunction RandomDefineCustomElement(\r\n  initclass: Function,\r\n  extendsname?: string,\r\n  length = 1\r\n): string | undefined {\r\n  if (!isclassextendsHTMLElement(initclass)) {\r\n    console.error(initclass);\r\n    console.error(invalid_custom_element_class);\r\n    throw TypeError();\r\n  }\r\n\r\n  //如果未注册自定义组件，则用随机名称注册，如果名称重复则重新生成新的随机名\r\n\r\n  if (!get(customElements, elementset).has(initclass)) {\r\n    const elementname = getrandomstringandnumber(length);\r\n\r\n    if (customElements.get(elementname)) {\r\n      return RandomDefineCustomElement(initclass, extendsname, length + 1);\r\n    } else {\r\n      if (extendsname) {\r\n        customElements.define(elementname, initclass, { extends: extendsname });\r\n      } else {\r\n        customElements.define(elementname, initclass);\r\n      }\r\n    }\r\n\r\n    return elementname;\r\n  } else {\r\n    return 使用value从表中查询key(get(customElements, elementmap), initclass);\r\n  }\r\n\r\n  //如果已经注册自定义组件，则返回注册的名称\r\n}\r\n\r\n/* customElements.get = function name(name) {\r\n  return customElements[elementmap].get(name);\r\n};\r\n */\r\ncustomElements.define = function(\r\n  name: string,\r\n  constructor: Function,\r\n  options?: ElementDefinitionOptions\r\n): void {\r\n  if (!isclassextendsHTMLElement(constructor)) {\r\n    console.error(constructor);\r\n    console.error(invalid_custom_element_class);\r\n    throw TypeError();\r\n  }\r\n  if (!get(customElements, elementset).has(constructor)) {\r\n    if (has(customElements[elementmap], name)) {\r\n      /* 防止定义重名 */\r\n      RandomDefineCustomElement(\r\n        constructor,\r\n        options ? options.extends : undefined\r\n      );\r\n    } else {\r\n      CustomElementRegistry.prototype.define.call(\r\n        customElements,\r\n        name,\r\n        constructor,\r\n        options\r\n      );\r\n      customElements[elementset].add(constructor);\r\n      customElements[elementmap][name] = constructor;\r\n    }\r\n  }\r\n};\r\nset(customElements, Symbol.iterator, () => {\r\n  const entries = Object.entries(customElements[elementmap]);\r\n\r\n  return entries[Symbol.iterator].call(entries);\r\n});\r\n/* customElements[Symbol.iterator] = () => {\r\n  const entries = Object.entries(customElements[elementmap]);\r\n\r\n  return entries[Symbol.iterator].call(entries);\r\n}; */\r\n\r\nconst charactorlist = Array(26)\r\n  .fill(undefined)\r\n  .map((v, i) => 97 + i)\r\n  .map(n => String.fromCharCode(n));\r\n\r\nconst hexnumberlist = Array(16)\r\n  .fill(undefined)\r\n  .map((v, i) => i)\r\n  .map(a => a.toString(16));\r\n\r\nconst charactorandnumberlist = [\r\n  ...new Set([...hexnumberlist, ...charactorlist])\r\n];\r\n\r\nfunction getrandomcharactor() {\r\n  return get(\r\n    //  Array(26)\r\n    //  .fill(undefined)\r\n    //  .map((v, i) => 97 + i)\r\n    // .map(n => String.fromCharCode(n))\r\n    charactorlist,\r\n    Math.floor(Math.random() * charactorlist.length)\r\n  );\r\n}\r\nfunction getrandomhexnumberandcharactor() {\r\n  return get(\r\n    // Array(16)\r\n    //  .fill(undefined)\r\n    // .map((v, i) => i)\r\n    charactorandnumberlist,\r\n    Math.floor(Math.random() * charactorandnumberlist.length)\r\n  );\r\n\r\n  //.toString(16);\r\n}\r\nfunction getrandomstringandnumber(length = 1) {\r\n  return (\r\n    Array(length)\r\n      .fill(undefined)\r\n      .map(() => getrandomcharactor())\r\n\r\n      .join(\"\") +\r\n    \"-\" +\r\n    Array(length)\r\n      .fill(undefined)\r\n      .map(() => getrandomhexnumberandcharactor())\r\n      .join(\"\")\r\n  );\r\n}\r\n"],"names":["Reflect","window","apply","construct","defineProperty","deleteProperty","get","getOwnPropertyDescriptor","getPrototypeOf","has","ownKeys","set","isobject","a","isfunction","isclassextendsHTMLElement","initclass","prototype","HTMLElement","invalid_custom_element_class","customElements","console","error","TypeError","使用value从表中查询key","表","组件状态名","outputentrie","Object","entries","find","v","undefined","CustomElementRegistry","elementset","Symbol","for","elementmap","Set","extendsname","RandomDefineCustomElement","length","elementname","getrandomstringandnumber","define","extends","name","constructor","options","call","add","iterator","charactorlist","Array","fill","map","i","n","String","fromCharCode","hexnumberlist","toString","charactorandnumberlist","getrandomcharactor","Math","floor","random","getrandomhexnumberandcharactor","join"],"mappings":"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"}