{"version":3,"file":"index.js","sources":["../node_modules/mvvm-reactive-view/src/reflect.ts","../node_modules/mvvm-reactive-view/src/util.ts","../node_modules/mvvm-reactive-view/src/customelement.ts","../node_modules/mvvm-reactive-view/src/CustomElementRegistry.ts"],"sourcesContent":["const Reflect = window.Reflect;\r\nexport default Reflect;\r\n\r\nexport const {\r\n  apply,\r\n  construct,\r\n  defineProperty,\r\n  deleteProperty,\r\n  get,\r\n  getOwnPropertyDescriptor,\r\n  getPrototypeOf,\r\n  has,\r\n\r\n  isExtensible,\r\n  ownKeys,\r\n  preventExtensions,\r\n  set,\r\n  setPrototypeOf\r\n} = Reflect;\r\nexport {};\r\n/*\r\napply()\r\n对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply() 功能类似。\r\nconstruct()\r\n对构造函数进行 new 操作，相当于执行 new target(...args)。\r\ndefineProperty()\r\n和 Object.defineProperty() 类似。\r\ndeleteProperty()\r\n作为函数的delete操作符，相当于执行 delete target[name]。\r\n//Reflect.enumerate()\r\n该方法会返回一个包含有目标对象身上所有可枚举的自身字符串属性以及继承字符串属性的迭代器，for...in 操作遍历到的正是这些属性。\r\nget()\r\n获取对象身上某个属性的值，类似于 target[name]。\r\ngetOwnPropertyDescriptor()\r\n类似于 Object.getOwnPropertyDescriptor()。\r\ngetPrototypeOf()\r\n类似于 Object.getPrototypeOf()。\r\nhas()\r\n判断一个对象是否存在某个属性，和 in 运算符 的功能完全相同。\r\nisExtensible()\r\n类似于 Object.isExtensible().\r\nownKeys()\r\n返回一个包含所有自身属性（不包含继承属性）的数组。(类似于 Object.keys(), 但不会受enumerable影响).\r\npreventExtensions()\r\n类似于 Object.preventExtensions()。返回一个Boolean。\r\nset()\r\n将值分配给属性的函数。返回一个Boolean，如果更新成功，则返回true。\r\nsetPrototypeOf()\r\n类似于 Object.setPrototypeOf()。\r\n*/\r\n","import { has, get } from \"./reflect\";\r\nimport { isFunction } from \"./util\";\r\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\nexport function isundefined(a: any) {\r\n  return typeof a === \"undefined\";\r\n}\r\n\r\nexport function isnumber(a: any) {\r\n  return typeof a === \"number\";\r\n}\r\nexport function isboolean(a: any) {\r\n  return typeof a === \"boolean\";\r\n}\r\nexport function isobject(a: any): a is object {\r\n  return typeof a === \"object\" && a !== null;\r\n}\r\n// export function isstring(a: string): true;\r\n// export function isstring(a): boolean;\r\nexport function isstring(a: any): a is string {\r\n  return typeof a === \"string\";\r\n}\r\nexport function isfunction(a: any): a is Function {\r\n  return typeof a === \"function\";\r\n}\r\n\r\nexport function isarray(a: any): a is Array<any> {\r\n  return a instanceof Array && Array.isArray(a) && gettagtype(a) === \"array\";\r\n}\r\nexport { isfunction as isFunction, isarray as isArray, isstring as isString };\r\nexport function getsymbol(a: string) {\r\n  return Symbol(a);\r\n}\r\nexport function gettagtype(a: any): string {\r\n  return {}.toString\r\n    .call(a)\r\n    .replace(\"[object \", \"\")\r\n    .replace(\"]\", \"\")\r\n    .toLowerCase();\r\n}\r\nexport function ispromise(a: any): a is Promise<any> {\r\n  return (\r\n    gettagtype(a) === \"promise\" && isFunction(get(a, \"then\")) && has(a, \"catch\")\r\n  );\r\n}\r\nexport function isSet(a: any): a is Set<any> {\r\n  return gettagtype(a) === \"set\" && a instanceof Set;\r\n}\r\n","//import setlikearray from \"./setlikearay\";\r\n\r\n// const customElementsarray = new Set;\r\nimport RandomDefineCustomElement from \"./CustomElementRegistry\";\r\n/* function getcustomelementname(initclass: any): string {\r\n  return customElements(initclass);\r\n} */\r\nimport { isfunction } from \"./util\";\r\nexport function isclassextendsHTMLElement(initclass: {\r\n  prototype: any;\r\n}): boolean {\r\n  return !!(\r\n    isfunction(initclass) &&\r\n    initclass.prototype &&\r\n    initclass.prototype instanceof HTMLElement\r\n  );\r\n}\r\n\r\nimport { construct } from \"./reflect\";\r\n// import Reflect from \"./reflect\";\r\n\r\nimport { Class } from \"./rendervdomtoreal\";\r\n\r\nexport function createcostumelemet(\r\n  initclass: Class | Function,\r\n  propsjson?: object,\r\n  children?: any[],\r\n  options?: any\r\n): HTMLElement {\r\n  if (isclassextendsHTMLElement(initclass)) {\r\n    // customElementsarray.push(initclass);\r\n    /*   const elementname =\r\n     getcustomelementname(initclass); */\r\n    /* if (customElements.get(elementname) === initclass) {\r\n    } else {\r\n      customElements.define(elementname, initclass);\r\n    } */\r\n    RandomDefineCustomElement(initclass);\r\n    return construct(initclass, [propsjson, children, options]); // (children);\r\n  } else {\r\n    console.error(initclass);\r\n\r\n    throw TypeError(\"invalid custom element class !\");\r\n  }\r\n}\r\n","import { isobject } from \"./util\";\r\nif (\r\n  //   typeof Proxy !== \"function\" ||\r\n  !isobject(window.customElements) //||\r\n  //   typeof customElements !== \"object\" ||\r\n\r\n  //||\r\n  //   typeof CustomElementRegistry !== \"function\"\r\n) {\r\n  throw new TypeError(\" customElements  not supported !\");\r\n}\r\nimport { isclassextendsHTMLElement } from \"./customelement\";\r\n\r\nfunction 使用value从表中查询key(表: object, 组件状态名: any) {\r\n  return Object.entries(表).find(v => {\r\n    return v[1] === 组件状态名;\r\n  })[0];\r\n}\r\n\r\nimport { get, getPrototypeOf, has } from \"./reflect\";\r\ninterface ElementDefinitionOptions {\r\n  extends?: string;\r\n}\r\nwindow.CustomElementRegistry = get(\r\n  getPrototypeOf(window.customElements),\r\n  \"constructor\"\r\n);\r\nconst { customElements, CustomElementRegistry } = window;\r\n\r\n// export default customElements;\r\nconst elementset = Symbol.for(\"elementset\");\r\nconst elementmap = Symbol.for(\"elementmap\");\r\nexport default (initclass: Function, extendsname?: string) =>\r\n  RandomDefineCustomElement(initclass, extendsname);\r\n\r\nfunction RandomDefineCustomElement(\r\n  initclass: Function,\r\n  extendsname?: string,\r\n  length = 1\r\n): string {\r\n  if (!isclassextendsHTMLElement(initclass)) {\r\n    throw TypeError(\"invalid custom element class !\");\r\n  }\r\n\r\n  //如果未注册自定义组件，则用随机名称注册，如果名称重复则重新生成新的随机名\r\n\r\n  if (!customElements[elementset].has(initclass)) {\r\n    const elementname = getrandomstringandnumber(length);\r\n\r\n    if (customElements.get(elementname)) {\r\n      return RandomDefineCustomElement(initclass, extendsname, length + 1);\r\n    } else {\r\n      if (extendsname) {\r\n        customElements.define(elementname, initclass, { extends: extendsname });\r\n      } else {\r\n        customElements.define(elementname, initclass);\r\n      }\r\n    }\r\n\r\n    return elementname;\r\n  } else {\r\n    return 使用value从表中查询key(customElements[elementmap], initclass);\r\n  }\r\n\r\n  //如果已经注册自定义组件，则返回注册的名称\r\n}\r\nif (!customElements[elementset]) {\r\n  customElements[elementset] = new Set();\r\n}\r\nif (!customElements[elementmap]) {\r\n  customElements[elementmap] = {};\r\n}\r\n/* customElements.get = function name(name) {\r\n  return customElements[elementmap].get(name);\r\n};\r\n */\r\ncustomElements.define = function(\r\n  name: string,\r\n  constructor: Function,\r\n  options?: ElementDefinitionOptions\r\n): void {\r\n  if (!isclassextendsHTMLElement(constructor)) {\r\n    console.error(constructor);\r\n    throw TypeError(\"invalid custom element class !\");\r\n  }\r\n  if (!customElements[elementset].has(constructor)) {\r\n    if (has(customElements[elementmap], name)) {\r\n      /* 防止定义重名 */\r\n      RandomDefineCustomElement(\r\n        constructor,\r\n        options ? options.extends : undefined\r\n      );\r\n    } else {\r\n      CustomElementRegistry.prototype.define.call(\r\n        customElements,\r\n        name,\r\n        constructor,\r\n        options\r\n      );\r\n      customElements[elementset].add(constructor);\r\n      customElements[elementmap][name] = constructor;\r\n    }\r\n  }\r\n};\r\n\r\ncustomElements[Symbol.iterator] = () => {\r\n  const entries = Object.entries(customElements[elementmap]);\r\n\r\n  return entries[Symbol.iterator].call(entries);\r\n};\r\nfunction getrandomcharactor() {\r\n  return get(\r\n    Array(26)\r\n      .fill(undefined)\r\n      .map((v, i) => 97 + i)\r\n      .map(n => String.fromCharCode(n)),\r\n    Math.floor(Math.random() * 26)\r\n  );\r\n\r\n  // [Math.floor(Math.random() * 26)];\r\n}\r\nfunction getrandomhexnumber() {\r\n  return get(\r\n    Array(16)\r\n      .fill(undefined)\r\n      .map((v, i) => i),\r\n    Math.floor(Math.random() * 16)\r\n  ).toString(16);\r\n\r\n  /*  Array(16)\r\n    .fill(undefined)\r\n    .map((v, i) => i)\r\n    [Math.floor(Math.random() * 16)].toString(16); */\r\n}\r\nfunction getrandomstringandnumber(length = 4) {\r\n  return (\r\n    Array(length)\r\n      .fill(undefined)\r\n      .map(() => getrandomcharactor())\r\n\r\n      .join(\"\") +\r\n    \"-\" +\r\n    Array(length)\r\n      .fill(undefined)\r\n      .map(() => getrandomhexnumber())\r\n      .join(\"\")\r\n  );\r\n}\r\n"],"names":["Reflect","window","apply","construct","defineProperty","deleteProperty","get","getOwnPropertyDescriptor","getPrototypeOf","has","isExtensible","ownKeys","preventExtensions","set","setPrototypeOf","isobject","a","isfunction","isclassextendsHTMLElement","initclass","prototype","HTMLElement","customElements","TypeError","使用value从表中查询key","表","组件状态名","Object","entries","find","v","CustomElementRegistry","elementset","Symbol","for","elementmap","extendsname","RandomDefineCustomElement","length","elementname","getrandomstringandnumber","define","extends","Set","name","constructor","options","console","error","undefined","call","add","iterator","getrandomcharactor","Array","fill","map","i","n","String","fromCharCode","Math","floor","random","getrandomhexnumber","toString","join"],"mappings":"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"}